diff --git a/desktop_app/app/microbit.js b/desktop_app/app/microbit.js
index de25ed1..f1e1f86 100644
--- a/desktop_app/app/microbit.js
+++ b/desktop_app/app/microbit.js
@@ -121,13 +121,10 @@ function handleDataLine(dataJSON) {
           + dataJSON);
 	break;
       }
+
       dataJSON.time = new Date().getTime();
-      if (dataJSON.ptype == 'MSG') {
-        store.dispatch(packetActions.addPacket(dataJSON));
-      }
-      if (dataJSON.ptype == 'LSA') {
-        store.dispatch(packetActions.addPacket(dataJSON));
-      }
+      console.log(dataJSON);
+      store.dispatch(packetActions.addPacket(dataJSON));
       break;
 
     case 'sink-tree':
diff --git a/router/source/event.cpp b/router/source/event.cpp
new file mode 100644
index 0000000..4594acd
--- /dev/null
+++ b/router/source/event.cpp
@@ -0,0 +1,23 @@
+#include "event.h"
+
+// TODO: formatting events like they are packets for convenience, should change to
+// new format for events.
+
+ManagedString neighbour_discovered_event(uint16_t ip, uint8_t rssi) {
+    ManagedString result = "{";
+    result = result + format_attr("type", "packet");
+    result = result + format_attr("ptype", "neighbour_discovered");
+    result = result + format_attr("ip", ip);
+    result = result + format_attr("rssi", rssi);
+    result = result + "}" + SERIAL_DELIMITER;
+    return result;
+}
+
+ManagedString router_timed_out_event(uint16_t ip) {
+    ManagedString result = "{";
+    result = result + format_attr("type", "packet");
+    result = result + format_attr("ptype", "router_timed_out");
+    result = result + format_attr("ip", ip);
+    result = result + "}" + SERIAL_DELIMITER;
+    return result;
+}
diff --git a/router/source/event.h b/router/source/event.h
new file mode 100644
index 0000000..f96fc34
--- /dev/null
+++ b/router/source/event.h
@@ -0,0 +1,6 @@
+#pragma once
+#include "config.h"
+#include "util.h"
+
+ManagedString neighbour_discovered_event(uint16_t ip, uint8_t rssi);
+ManagedString router_timed_out_event(uint16_t ip);
diff --git a/router/source/graph.cpp b/router/source/graph.cpp
index c363e51..54d85dd 100644
--- a/router/source/graph.cpp
+++ b/router/source/graph.cpp
@@ -29,24 +29,23 @@ void update_alive_nodes(uint16_t ip, unsigned long time) {
 
 /* Updates graph from ping response. If the ping came from a router that is
  * closer than CONNECTION_THRESHOLD, we add it to our graph or update its arc
- * value if it's already present. If it's farther away than DISCONNECTION_THRESHOLD,
- * we delete the arc from our graph.
+ * value if it's already present.
+ * Returns a bool indicating whether or not a new neighbour was added.
  */
-void update_graph(uint16_t from, uint16_t to, int distance) {
+bool update_graph(uint16_t from, uint16_t to, int distance) {
+    bool new_neighbour = false;
     edge e({from, to});
     lock_graph();
     auto it = graph.find(e);
     if (it != graph.end()) {
-        if (distance < DISCONNECTION_THRESHOLD) {
-            graph.erase(it);
-        } else {
-            graph[e] = distance;
-        }
+        graph[e] = distance;
     } else if (distance >= CONNECTION_THRESHOLD) {
         graph[e] = distance;
+        new_neighbour = true;
     }
     unlock_graph();
     delete_extra_neighbours(from);
+    return new_neighbour;
 }
 
 /* Updates graph from LSA packet. Treats the packet as ground truth - deletes
@@ -230,8 +229,8 @@ ManagedString path_json(uint16_t ip) {
 }
 
 /* Prunes graph by deleting 'dead' routers and every arc that contains them.
- */
-void remove_dead_nodes(unsigned long current_time) {
+ * Returns the nodes that were found to be dead. */
+std::unordered_set<uint16_t> remove_dead_nodes(unsigned long current_time) {
     std::unordered_set<uint16_t> dead_nodes = get_dead_nodes(current_time);
 
     std::unordered_map<struct edge, int> new_graph;
@@ -244,6 +243,7 @@ void remove_dead_nodes(unsigned long current_time) {
     }
     graph = new_graph;
     unlock_graph();
+    return dead_nodes;
 }
 
 bool contains(std::unordered_set<uint16_t> set, uint16_t value) {
diff --git a/router/source/graph.h b/router/source/graph.h
index 96b91c2..e589f34 100644
--- a/router/source/graph.h
+++ b/router/source/graph.h
@@ -19,7 +19,7 @@ void lock_graph();
 void unlock_graph();
 void update_alive_nodes(uint16_t ip, unsigned long time);
 bool update_graph(Packet* p);
-void update_graph(uint16_t from, uint16_t to, int distance);
+bool update_graph(uint16_t from, uint16_t to, int distance);
 void recalculate_graph(uint16_t source);
 std::unordered_set<struct edge> delete_all_edges(uint16_t ip);
 void delete_extra_neighbours(uint16_t ip);
@@ -31,7 +31,7 @@ ManagedString graph_to_json(std::unordered_map<struct edge, int> graph);
 ManagedString get_topology_json(uint16_t ip);
 ManagedString path_json(uint16_t ip);
 std::vector<uint16_t> get_neighbours(uint16_t ip);
-void remove_dead_nodes(unsigned long current_time);
+std::unordered_set<uint16_t> remove_dead_nodes(unsigned long current_time);
 std::unordered_set<uint16_t> get_dead_nodes(unsigned long current_time);
 bool contains(std::unordered_set<uint16_t> set, uint16_t value);
 std::vector<std::pair<edge, int>> get_neighbour_edges(uint16_t ip);
diff --git a/router/source/router.cpp b/router/source/router.cpp
index 9ab0e04..8f7e36d 100644
--- a/router/source/router.cpp
+++ b/router/source/router.cpp
@@ -43,8 +43,10 @@ unsigned long get_system_time() {
 /* Handler for receiving a packet. */
 void on_packet(MicroBitEvent) {
     PacketBuffer buffer = uBit.radio.datagram.recv();
-    if (buffer == PacketBuffer::EmptyPacket || uBit.radio.getRSSI() == 0
-            || buffer.length() != PACKET_SIZE) {
+    auto rssi = uBit.radio.getRSSI();
+    if (buffer == PacketBuffer::EmptyPacket || rssi == 0
+            || buffer.length() != PACKET_SIZE
+            || rssi < DISCONNECTION_THRESHOLD) {
         return;
     }
 
@@ -52,7 +54,7 @@ void on_packet(MicroBitEvent) {
         return;
     }
 
-    packet_queue.push_back(new Packet(buffer, uBit.radio.getRSSI()));
+    packet_queue.push_back(new Packet(buffer, rssi));
 }
 
 void process_packets() {
@@ -126,7 +128,7 @@ void handle_lsa(Packet* p) {
 
           if (update_graph(p)) {
             /* Update desktop app with new packet only if the topology changes. */
-            // TODO: send as event rather than packet.
+            // TODO: Make LSAs an event, like the neighbour updates.
             serial.send(p->to_json());
           }
 
@@ -168,7 +170,9 @@ void handle_ping(Packet* p) {
         uBit.sleep(1);
     } else if (p->imm_dest_ip == ip) {
         // Got back our own ping packet
-        update_graph(ip, p->source_ip, p->rssi);
+        if (update_graph(ip, p->source_ip, p->rssi)) {
+            serial.send(neighbour_discovered_event(ip, p->rssi));
+        }
     }
 }
 
@@ -297,7 +301,10 @@ void update_network() {
         send_lsa(MicroBitEvent());
         uBit.sleep(UPDATE_RATE);
 
-        remove_dead_nodes(get_system_time());
+        std::unordered_set<uint16_t> dead_nodes = remove_dead_nodes(get_system_time());
+        for (uint16_t ip: dead_nodes) {
+          serial.send(router_timed_out_event(ip));
+        }
     }
 }
 
diff --git a/router/source/router.h b/router/source/router.h
index 806cd7a..bb1f59c 100644
--- a/router/source/router.h
+++ b/router/source/router.h
@@ -4,6 +4,7 @@
 #include "graph.h"
 #include "config.h"
 #include "lsr.h"
+#include "event.h"
 #include <vector>
 
 void broadcast(Packet* p);
